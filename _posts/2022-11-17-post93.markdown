---
title: "Maven VS Gradle"
date: 2022-11-17
last_modified_at: 2022-11-17
categories: 
  - Spring
tags:
  - [Maven,Gradle]
---

Maven 같은 경우는 스프링 프로젝트에서 pom.xml이란 이름을 쓰고, Gradle은 Spring Boot, 안드로이드에서 쓰는 걸로 알고 있다.

 

## Maven 이란?
프로젝트를 진행하게 되면 단순히 자신이 작성한 코드만으로 개발하는 것이 아니라 많은 라이브러리 들을 활용해서 개발을 할 수 있다. 이 때 사용되는 라이브러리들의 수가 수십개가 훌쩍 넘어버리는 일이 발생해 이 많은 라이브러리들을 관리하는 것이 힘들어지는 경우가 종종 발생하곤 한다. Maven은 이러한 문제를 해결해 줄 수 있는 도구이다. Maven은 내가 사용할 라이브러리 뿐만 아니라 해당 라이브러리가 작동하는데 필요한 다른 라이브러리들 까지 관리하여 네트워크를 통해 자동으로 다운 받아준다.  

Maven은 프로젝트의 전체적인 라이프사이클을 관리하는 도구이며, 많은 편리함과 이점이 있어 널리 사용되고 있다. 기존에는 Ant가 많이 사용되었지만 Maven이 Ant를 넘어서 더 많은 개발자들이 사용하게 되었고 비교적 최근에는 Gradle이 새롭게 나와 사용되고 있다.  

Maven은 JDK설치와 같이 설치하 ㄹ수 있다. 환경변수 잡아주고 하면 cmd에서 mvn -version을 통해 버전을 알 수 있고 설치가 가능하다. 설치는 메이븐 홈페이지에서 할 수 있다.  

## Maven의 Lifecycle
maven 에서는 미리 정의하고 있는 빌드 순서가 있으며 이 순서를 라이프사이클이라고 한다. 라이프 사이클의 빌드 단계를 Phase라고 하는데 이런 Phase들은 의존관계를 가지고 있다.  
- Clean : 이 전 빌드에서 생성된 파일들을 삭제하는 단계
- Validate : 프로젝트가 올바른지 확인하고 필요한 모든 정보를 사용할 수 있는지 확인하는 단계
- Compile : 프로젝트의 소스코드를 컴파일하는 단계
- Test : 유닛(단위) 테스트를 수행하는 단계(테스트 실패 시 빌드 실패로 처리, 스킵 가능)
- Package : 실제 컴파일된 소스 코드와 리소스들을 jar등의 배포를 위한 패키지로 만드는 단계
- Verify : 통합테스트 결과에 대한 검사를 실행하여 품질 기준을 충족하는지 확인하는 단계
- Install : 패키지를 로컬 저장소에 설치하는 단계
- Site : 프로젝트 문서를 생성하는 단계
- Deploy : 만들어진 Package를 원격 저장소에 release하는 단계
 
위에 9개의 라이프사이클 말고도 더 많은 종류의 라이프사이클이 존재한다. 이를 크게 Clean, Build, site 세가지 라이프사이클로 나누고 있다. 각 단계를 모두 수행하는 것이 아니라 원하는 단계까지만 수행할 수 도 있으며 test 단계는 큰 프로젝트의 경우에 몇시간이 소요될 수 있으니 수행하지 않도록 스킵이 가능하다.  

 

## Phase와 Goal

 

위에서 잠깐 언급했던 Phase는 Maven의 Build LifeCycle의 각각의 단계를 의미한다. 각각의 Phase는 의존관계를 가지고 있어 해당 Phase가 수행되려면 이전 단계의 Phase가 모두 수행되어야 한다.  

POM - Project Object Model  
pom은 Project Object Model의 약자로 이름 그대로 Project Object Model의 정보를 담고있는 파일이다. 이 파일에서 주요하게 다루는 기능들은 다음과 같다.  
- 프로젝트 정보 : 프로젝트의 이름, 개발자 목록, 라이센스 등
- 빌드 설정 : 소스, 리소스, 라이프 사이클별 실행한 플로그인등 빌드와 관련된 설정
- 빌드 환경 : 사용자 환경 별로 달라질 수 있는 프로파일 정보
- POM연관 정보 : 의존 프로젝트(모듈), 상위 프로젝트, 포함하고 있는 하위 모듈 등
POM은 pom.xml파일을 말하며 Maven의 기능을 이용하기 위해 POM이 사용된다.

## Gradle
Gradle이란 기본적으로 빌드 배포 도구(Build Tool)이다. 안드로이드 앱을 만들 때 필요한 공식 빌드시스템이기도 하며 JAVA, C/C++, Python등을 지원한다.  
 
빌드툴인 Ant Builder와 그루비 스크립트를 기반으로 구축되어 기존 Ant의 역할과 배포 스크립트의 기능을 모두 사용가능하다.  

기본 메이븐의 경우 XML로 라이브러리를 정의하고 활용하도록 되어 있으나, Gradle의 경우 별도의 빌드스크립트를 통하여 사용할 어플리케이션 버전, 라이브러리등의 항목을 설정할 수 있다.   

장점으로는  스크립트 언어로 구성되어 있기 때문에, XML과 달리 변수선언, if, else, for등으 ㅣ로직이 구현가능하여 간결하게 구성 가능하다.  

- 라이브러리 관리 : 메이븐 레파지토리를 동일하게 사용할 수 있어서 설정된 서버를 통하여 라이브러리를 다운로드 받아 모두 동일한 의존성을 가진 환경을 수정할 수 있다. 자신이 추가한 라이브러리도 레파지토리 서버에 올릴 수 있다. 
- 프로젝트 관리 : 모든 프로젝트가 일관된 디렉토리 구조를 가지고 빌드 프로세스를 유지하도록 도와준다.
- 단위 테스트 시 의존성 관리 : junit등을 사용하기 위해서 명시한다.
 
그래서 무엇이 좋은가?

Maven에는 Gradle과 비교문서가 없지만, Gradle에는 비교문서가 많다. 그만큼 Gradle 자신있는 모습이다.  

Gradle이 시기적으로 늦게 나온만큼 사용성, 성능 등 비교적 뛰어난 스펙을 가지고 있다.  

Gradle이 Maven 보다 좋은 점 . 

- Build라는 동적인 요소를 XML로 정의하기에는 어려운 부분이 많다.
- Gradle은 그루비 를 사용하기 때문에 동적인 빌드는 Groovy 스크립트로 플러그인을 호출하거나 직접 코드를 짜면 된다.
- Gradle은 메이븐보다 최대 100배 빠르다.
