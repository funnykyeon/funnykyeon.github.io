---
title: "PUT vs PATCH"
date: 2022-09-29
last_modified_at: 2022-09-29
categories: 
  - CS
tags:
  - [멱등성]
---
# PUT vs PATCH을 알아보기전에 멱등법칙 부터 알아보자  

아래는 위키 이미지이다.  
<[위키백과 링크](https://ko.wikipedia.org/wiki/%EB%A9%B1%EB%93%B1%EB%B2%95%EC%B9%99)>  
![image](https://user-images.githubusercontent.com/99777315/193018071-b07b9d82-5919-4656-94d3-cc1d2e0aa67e.png){: width="65%" height="65%"}  

멱등하다는 것은 여러 요청에도 동일한 결과라는 뜻이고, 비멱등하다는건 여러 요청이 들어오면 결과는 누적되서 나온다는것이다.  
간단하게 설명하자면  
```
멱등 = 동일
비멱등 = 비동일
```  

예를들어 흔히 쓰는 GET이나 DELETE는 멱등하다. 수십번 조회하고 삭제한다고해서 페이지가 바뀌는 경우는 없다.  
GET은 이미 동일한값을 조회하기에 페이지는 동일할것이며, DELETE는 1회 삭제후라면 삭제할값이 없으니 동일한 상태일것이다.   

그렇다면 수정 메서드인 PUT과 PATCH는 멱등일까 비멱등일까?  
다른 자료들을 찾아보면 PUT은 전체를 바꾸기 때문에 멱등(비동일)이고,  
PATCH는 부분 수정이기 때문에 비멱등이라고 한다.  

# 간단한 예시  

PUT 메서드
```
(주행거리가 10000km 인 자동차이다. 정확하게 10km를 달렸다고 과정해보자.)

PUT : 계기판 을 10010km 변경
PUT : 계기판 을 10010km 변경
PUT : 계기판 을 10010km 변경
```

PATCH 메서드
```
(주행거리가 10000km 인 자동차이다. 정확하게 10km를 달렸다고 과정해보자.)

PATCH : 계기판 을 10km 추가
PATCH : 계기판 을 10km 추가
PATCH : 계기판 을 10km 추가
```
결과는 PUT 메서드는 10010km가 되있을것이고,  PATCH 메서드는 30km가 되었을 것이다.

멱등과 비멱등의 차이로 과정이 동일해도 다른값을 출력한다.
